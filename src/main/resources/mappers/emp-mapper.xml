<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 해당 파일에 모든 쿼리문을 작성 -->
<mapper namespace="empMapper">
	<resultMap type="com.study.test.emp.vo.EmpVO" id="emp">
		<id column="EMP_NO"	  property="empNo"/>
		<result column="EMP_TYPE" property="empType"/>
		<result column="MEM_NO"   property="memNo"/>
		<result column="DEPT_NO"  property="deptNo"/>
		<result column="COLL_NO"  property="collNo"/>
	</resultMap>

	<resultMap type="com.study.test.emp.vo.LectureVO" id="lecture">
		<id column="LEC_NO" 	      property="lecNo"/>
		<result column="LEC_NAME"     property="lecName"/>
		<result column="LEC_SCORE"    property="lecScore"/>
		<result column="CREATE_DATE"  property="createDate"/>
		<result column="MAX_NUM" 	  property="maxNum"/>
		<result column="NOW_NUM" 	  property="nowNum"/>
		<result column="LEC_STATUS"   property="lecStatus"/>
		<result column="EMP_NO" 	  property="empNo"/>
		<result column="SEM_NO" 	  property="semNo"/>
		<result column="COLL_NO" 	  property="collNo"/>
		<result column="DEPT_NO" 	  property="deptNo"/>
		<result column="SEARCH_VALUE" property="searchValue"/>
		<association property="stuVO" 	       resultMap="stuMapper.stu"></association>
		<association property="semesterVO"     resultMap="semester"></association>
		<association property="memberVO"   	   resultMap="memberMapper.member"></association>
		<association property="empVO" 	   	   resultMap="emp"></association>
		<association property="deptVO" 	   	   resultMap="colleageMapper.dept"></association>
		<association property="colleageVO" 	   resultMap="colleageMapper.colleage"></association>
		<association property="memberVO"   	   resultMap="memberMapper.member"></association>
		<association property="enrollmentVO"   resultMap="enrollment"></association>
		<collection property="lectureTimeList" resultMap="lectureTime"></collection>
	</resultMap>
	
	<resultMap type="com.study.test.emp.vo.EnrollmentVO" id="enrollment">
		<id		column="ENROLLMENT_NO"  property="enrollmentNo"/>
		<result column="STU_NO" 		property="stuNo"/>
		<result column="LEC_NO" 		property="lecNo"/>
		<result column="SEM_NO" 		property="semNo"/>
	</resultMap>

	<resultMap type="com.study.test.colleage.vo.SemesterVO" id="semester">
		<id		column="SEM_NO"  		property="semNo"/>
		<result column="SEM_YEAR" 		property="semYear"/>
		<result column="SEMESTER" 		property="semester"/>
	</resultMap>
	
	<resultMap type="com.study.test.emp.vo.LectureTimeVO" id="lectureTime">
		<id column="TIME_NO"	 property="timeNo"/>
		<result column="LEC_DAY"	 property="lecDay"/>
		<result column="FIRST_TIME"  property="firstTime"/>
		<result column="LAST_TIME"   property="lastTime"/>
		<result column="LEC_NO"  	 property="lecNo"/>
	</resultMap>
	
	<!-- 접속해있는 교수의 EMP_NO 조회  -->
	<select id="getNowEmpNo" resultType="String">
		SELECT EMP_NO
		FROM EMP
		WHERE MEM_NO = #{memNo}
	</select>
	
	<!-- 다음에 들어갈 LEC_NO 조회 -->
	<select id="getNextLecNo" resultType="String">
		SELECT 'LEC_'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(LEC_NO, 5))), 0) +1,3,0) FROM LECTURE
	</select>
	
	<!-- 강의 등록 -->
	<insert id="insertLecture">
		INSERT INTO LECTURE (
			LEC_NO
			, LEC_NAME
			, LEC_SCORE
			, MAX_NUM
			, NOW_NUM
			, EMP_NO
			, SEM_NO
			, COLL_NO
			, DEPT_NO
		) VALUES (
			#{lecNo}
			, #{lecName}
			, #{lecScore}
			, #{maxNum}
			, #{nowNum}
			, #{empNo}
			, #{semNo}
			, #{collNo}
			, #{deptNo}
		)
	</insert>
	
	<!-- 강의시간 테이블 등록 -->
	<insert id="regLectureTime">
		INSERT INTO LECTURE_TIME (
			TIME_NO
			, LEC_DAY
			, FIRST_TIME
			, LAST_TIME
			, LEC_NO
		) 
		<foreach collection="lecTimeList" item="lecTime" separator="UNION ALL" index="i">
			SELECT (SELECT 'TIME_'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(TIME_NO, 6))), 0) +#{i}+1,3,0) 
					FROM LECTURE_TIME)
				, #{lecTime.lecDay}
				, #{lecTime.firstTime}
				, #{lecTime.lastTime}
				, #{lecTime.lecNo}
			FROM DUAL
		</foreach>
	</insert>
	
	<!-- 강의 시간표 작성 위한 강의 및 강의시간 조회 -->
	<select id="getLectureListForSchedule" resultType="HashMap">
		SELECT LEC_NAME
			, LEC_SCORE
			, FIRST_TIME
			, LAST_TIME
			, DECODE(LEC_DAY, '월', 1, '화', 2, '수', 3, '목', 4, '금', 5) LEC_DAY
		FROM LECTURE LEC, DEPT, LECTURE_TIME TIME
		WHERE LEC.DEPT_NO = DEPT.DEPT_NO
		AND LEC.LEC_NO = TIME.LEC_NO
		AND #{empNo} = LEC.EMP_NO
	</select>
	
	<!-- 전체 강의리스트 조회 -->
	<select id="getLectureList" resultMap="lecture">
		SELECT LEC.LEC_NO
			, TIME_NO
		    , LEC_NAME
		    , LEC_SCORE
		    , FIRST_TIME
		    , LAST_TIME
		    , LEC_DAY
		    , DEPT_NAME
		    , COLL_NAME
		    , MEM_NAME
		    , MAX_NUM
		    , NOW_NUM
		    , DECODE(LEC_STATUS, 'Y', '강의중', 'N', '폐강') LEC_STATUS
		FROM LECTURE LEC, LECTURE_TIME TIME, DEPT, EMP, MEMBER, COLLEAGE COLL
		WHERE LEC.LEC_NO = TIME.LEC_NO
		AND LEC.DEPT_NO = DEPT.DEPT_NO
		AND LEC.COLL_NO = COLL.COLL_NO
		AND MEMBER.MEM_NO = EMP.MEM_NO
		AND LEC.EMP_NO = EMP.EMP_NO
		AND EMP.EMP_NO = #{empNo}
		<if test='searchValue != null and !searchValue.equals("")'>
		AND UPPER(LEC_NAME) LIKE '%'||UPPER(#{searchValue})||'%'
		</if>
		<if test='lecStatus != null and lecStatus == "Y"'>
		AND LEC_STATUS = 'Y'
		</if>
		<if test='lecStatus != null and lecStatus == "N"'>
		AND LEC_STATUS = 'N'
		</if>
		<if test='lecNo != null and lecNo != "" '>
		AND TIME.LEC_NO = #{lecNo}
		</if>
		ORDER BY LEC.NAME
	</select>
	
	<!-- 강의 폐강시 강의상태 수정 -->
	<update id="updateLecStatusAjax">
		UPDATE LECTURE SET 
			LEC_STATUS = 'N'
		WHERE LEC_NO = #{lecNo}
	</update>
	
	<!-- 강의 수정 -->
	<update id="lecUpdate">
		UPDATE LECTURE SET 
		    LEC_NAME = #{lecName}
		    , LEC_SCORE = #{lecScore}
		WHERE LEC_NO = #{lecNo}
	</update>
	
	<!-- 강의시간 수정 -->
	<update id="updateLectureTime">
        UPDATE LECTURE_TIME
			SET
		    LEC_DAY = CASE 
		    <foreach collection="lectureTimeList" item="lectureTime">
    			   WHEN TIME_NO = #{lectureTime.timeNo} THEN #{lectureTime.lecDay}
            </foreach>
                   ELSE LEC_DAY END,
                   
		    FIRST_TIME = CASE 
		    <foreach collection="lectureTimeList" item="lectureTime">
    				WHEN TIME_NO = #{lectureTime.timeNo} THEN #{lectureTime.firstTime}
		    </foreach>
                    ELSE FIRST_TIME END,
                    
		    LAST_TIME = CASE 
		    <foreach collection="lectureTimeList" item="lectureTime">
    				WHEN TIME_NO = #{lectureTime.timeNo} THEN #{lectureTime.lastTime}
		    </foreach>
                    ELSE LAST_TIME END
                    
		WHERE TIME_NO IN (
			<foreach collection="lectureTimeList" item="lectureTime" separator=",">
					#{lectureTime.timeNo}
			</foreach>
	    )
	</update>

	
	<!-- 성적등록위한 강의 목록 조회 -->
	<select id="getLectureListForRegScore" resultType="HashMap">
		SELECT LEC_NO 
			, LEC_NAME
			, LEC_STATUS
			, LEC_SCORE
			, COLL_NAME
			, DEPT_NAME
		FROM LECTURE LEC, DEPT, COLLEAGE COLL 
		WHERE LEC.DEPT_NO = DEPT.DEPT_NO
		AND LEC.COLL_NO = COLL.COLL_NO
		AND EMP_NO = #{empNo}
	</select>
	
	<!-- 강의등록시 전공대학 선택시 해당하는 전공학과 이름 조회 Ajax-->
	<select id="getDeptNameAjax" resultMap="colleageMapper.dept">
		SELECT DEPT_NAME
			, DEPT_NO
		FROM COLLEAGE COLL, DEPT
		WHERE #{collNo} = DEPT.COLL_NO
        AND COLL.COLL_NO = DEPT.COLL_NO
	</select>
	
	<!-- 강의 등록시 시간중복 체크 (Ajax) -->
	<select id="timeDuplicationCheckAjax" resultType="int">
		SELECT SUM(COUNT)
		FROM(
		<foreach collection="lecTimeList" item="lecTime" separator="UNION ALL">
		    SELECT COUNT(TIME_NO) AS COUNT
		    FROM LECTURE_TIME TIME, LECTURE LEC
		    WHERE LEC_DAY = #{lecTime.lecDay}
		    AND ((FIRST_TIME &lt;= #{lecTime.firstTime} AND LAST_TIME &gt;= #{lecTime.firstTime}) 
		    OR (FIRST_TIME &lt;= #{lecTime.lastTime} AND LAST_TIME &gt;= #{lecTime.lastTime})) 
		    AND TIME.LEC_NO = LEC.LEC_NO
		    AND LEC.EMP_NO = #{empNo}
		    <if test="lecTime.lecNo!=null">
		    	AND LEC.LEC_NO != #{lecTime.lecNo}
		    </if>
	    </foreach>
	    )
	</select>
	
	<!-- 성적등록 위한 수강학생 조회 -->
	<select id="getStuEnrForRegScore" resultType="Map">
		SELECT 
		    ENR.STU_NO, 
		    MEMBER.MEM_NAME, 
		    MEMBER.MEM_NO, 
		    COALESCE(STU_GRADE.GRADE, '미등록') AS GRADE
		FROM 
		    STU
		INNER JOIN 
		    MEMBER ON STU.MEM_NO = MEMBER.MEM_NO
		INNER JOIN 
		    ENROLLMENT ENR ON ENR.STU_NO = STU.STU_NO
		LEFT JOIN 
		    STU_GRADE ON STU_GRADE.STU_NO = STU.STU_NO AND ENR.LEC_NO = STU_GRADE.LEC_NO
		WHERE 
		    ENR.LEC_NO = #{lecNo}
	</select>
	
	<!-- 수강신청용 강의 조회 -->
	<select id="getLectureForStu" resultMap="lecture">
		SELECT LECTURE.LEC_NO
			, LEC_NAME
			, LEC_SCORE
			, CREATE_DATE
			, MAX_NUM
			, NOW_NUM
			, LEC_STATUS
			, LECTURE.EMP_NO
			, SEM_NO
			, LECTURE.COLL_NO
            , COLL_NAME
			, LECTURE.DEPT_NO
			, DEPT_NAME
			, LEC_DAY
			, FIRST_TIME
			, LAST_TIME
            , EMP.MEM_NO
            , MEM_NAME
		FROM LECTURE, LECTURE_TIME, COLLEAGE COLL, DEPT, MEMBER, EMP
		WHERE LECTURE.LEC_NO = LECTURE_TIME.LEC_NO
		AND LECTURE.COLL_NO = COLL.COLL_NO
		AND LECTURE.DEPT_NO = DEPT.DEPT_NO
        AND EMP.COLL_NO = LECTURE.COLL_NO
        AND MEMBER.MEM_NO = EMP.MEM_NO
		<if test='searchValue != null and !searchValue.equals("")'>
		AND UPPER(LEC_NAME) LIKE '%'||UPPER(#{searchValue})||'%'
		</if>
		<if test="collNo != null and collNo != ''">
		AND COLL.COLL_NO = #{collNo}
		</if>
		<if test="deptNo != null and deptNo != ''">
		AND DEPT.DEPT_NO = #{deptNo}
		</if>
	</select>
	
	<!-- 수강신청 DB에 INSERT -->
	<insert id="insertEnrollment">
		INSERT INTO ENROLLMENT (
   				 ENROLLMENT_NO
   				 , STU_NO
  				 , LEC_NO
  				 , SEM_NO
				 ) VALUES (
				 (SELECT 'ENR_'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(ENROLLMENT_NO, 5))), 0) +1,3,0) FROM ENROLLMENT)
   				 , #{stuNo}
   				 , #{lecNo}
   				 , #{semNo}
   				 )
	</insert>
	
	<!-- 수강신청 내역 조회 -->
	<select id="getEnrollmentNow" resultMap="lecture">
		SELECT LECTURE.LEC_NO
			, LEC_NAME
			, LEC_SCORE
			, CREATE_DATE
			, MAX_NUM
			, NOW_NUM
			, LEC_STATUS
			, LECTURE.EMP_NO
			, LECTURE.SEM_NO
			, LECTURE.COLL_NO
            , COLL_NAME
			, LECTURE.DEPT_NO
			, DEPT_NAME
			, LEC_DAY
			, FIRST_TIME
			, LAST_TIME
            , EMP.MEM_NO
            , MEM_NAME
            , ENROLLMENT_NO
            , STU.STU_NO
            , SEM_YEAR
            , SEMESTER
		FROM LECTURE, LECTURE_TIME, COLLEAGE COLL, DEPT, MEMBER, EMP, ENROLLMENT ENR, SEMESTER SEM, STU
		WHERE LECTURE.LEC_NO = LECTURE_TIME.LEC_NO
		AND LECTURE.COLL_NO = COLL.COLL_NO
		AND LECTURE.DEPT_NO = DEPT.DEPT_NO
		AND EMP.COLL_NO = LECTURE.COLL_NO
		AND MEMBER.MEM_NO = EMP.MEM_NO
		AND LECTURE.LEC_NO = ENR.LEC_NO
		AND SEM.SEM_NO = LECTURE.SEM_NO
        AND ENR.STU_NO = STU.STU_NO
        AND LECTURE.LEC_STATUS = 'Y'
		AND STU.STU_NO = #{stuNo}
	</select>
	
	<!-- 수강신청 중복신청 불가 -->
	<select id="getLecForStu" resultType="int">
		SELECT COUNT(ENROLLMENT_NO) AS ERN
		FROM ENROLLMENT
		WHERE STU_NO = #{stuNo} 
		AND LEC_NO = #{lecNo}
	</select>
	
	<!-- 현재 신청인원 +1 -->
	<update id="updateNowNum">
		UPDATE LECTURE
		SET NOW_NUM = NOW_NUM + 1
		WHERE LEC_NO = #{lecNo}
	</update>
	
	<!-- 수강 신청 취소 -->
	<delete id="deleteEnr">
		DELETE ENROLLMENT
		WHERE STU_NO = #{stuNo}
		AND LEC_NO = #{lecNo}
	</delete>
	
	<!-- 현재 신청인원 -1 -->
	<update id="updateNowNumForDelete">
		UPDATE LECTURE
		SET NOW_NUM = NOW_NUM - 1
		WHERE LEC_NO = #{lecNo}
	</update>
	
	<!-- 학생 시간표 조회 -->
	<select id="getLectureListForStuTimeTable" resultMap="lecture">
		SELECT TIME_NO
		    , DECODE(LEC_DAY, '월', 1, '화', 2, '수', 3, '목', 4, '금', 5) LEC_DAY
		    , FIRST_TIME
		    , LAST_TIME
		    , LEC.LEC_NO
		    , STU_NO
		    , LEC.LEC_NAME
		    , LEC_SCORE
		FROM LECTURE LEC, LECTURE_TIME, ENROLLMENT
		WHERE LEC.LEC_NO = LECTURE_TIME.LEC_NO
		AND ENROLLMENT.LEC_NO = LEC.LEC_NO
		AND STU_NO = #{stuNo}
	</select>
</mapper>



























