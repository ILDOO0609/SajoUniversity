<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 해당 파일에 모든 쿼리문을 작성 -->
<mapper namespace="schoolMapper">
	<resultMap type="com.study.test.school.vo.SchoolInfoVO" id="school">
		<id 	column="SCH_INFO_CODE"	 	property="schInfoCode"/>
		<result column="SCH_INFO_TITLE" 	property="schInfoTitle"/>
		<result column="SCH_INFO_CONTENT" 	property="schInfoContent"/>
		<result column="SCH_INFO_WRITER" 	property="schInfoWriter"/>
		<result column="SCH_INFO_DATE" 		property="schInfoDate"/>
		<result column="SCH_INFO_STARTDATE" property="schInfoStartDate"/>
		<result column="SCH_INFO_ENDDATE" 	property="schInfoEndDate"/>
		<result column="SCH_INFO_READ_CNT" 	property="schInfoReadCnt"/>
		<result column="SCH_INFO_NUM" 		property="schInfoNum"/>
		<result column="SCH_INFO_SEARCH" 	property="schInfoSearch"/>
		<result column="SCH_INFO_Month" 	property="schInfoMonth"/>
	</resultMap>
	
	<insert id="insertSchoolInfo">
		INSERT INTO SCHOOL_INFORMATION (
			SCH_INFO_CODE
			, SCH_INFO_TITLE
			, SCH_INFO_CONTENT
			, SCH_INFO_STARTDATE
			, SCH_INFO_ENDDATE
			, SCH_INFO_WRITER
			, SCH_INFO_NUM
		) VALUES (
			(SELECT 'SCH_CODE_'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(SCH_INFO_CODE, 10))), 0) + 1, 3, '0') 
         	FROM SCHOOL_INFORMATION)
			, #{schInfoTitle}
			, #{schInfoContent}
			, #{schInfoStartDate}
			, #{schInfoEndDate}
			, #{schInfoWriter}
			, (SELECT 'No.'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(SCH_INFO_NUM, 4))), 0) + 1, 2, '0') 
         	FROM SCHOOL_INFORMATION)
		)
	</insert>
	
	<select id="getSchoolInfo" resultMap="school">
		SELECT SCH_INFO_CODE
			, SCH_INFO_TITLE
			, SCH_INFO_WRITER
			, TO_CHAR(SCH_INFO_DATE, 'YYYY-MM-DD') SCH_INFO_DATE
			, TO_CHAR(SCH_INFO_STARTDATE, 'YYYY-MM-DD') SCH_INFO_STARTDATE
			, TO_CHAR(SCH_INFO_ENDDATE, 'YYYY-MM-DD') SCH_INFO_ENDDATE
			, SCH_INFO_NUM
			, SCH_INFO_READ_CNT
		FROM SCHOOL_INFORMATION
		WHERE 1=1
		<if test='schInfoSearch != null and !schInfoSearch.equals("")'>
		AND UPPER(SCH_INFO_TITLE) LIKE '%'||UPPER(#{schInfoSearch})||'%'
		</if>
		ORDER BY SCH_INFO_NUM DESC
		OFFSET #{offsetCnt} ROWS FETCH NEXT #{displayCnt} ROWS ONLY
	</select>
	
	<select id="schInfoMonthAjax" resultMap="school">
	    SELECT SCH_INFO_CODE
	        , SCH_INFO_TITLE
	        , SCH_INFO_WRITER
	        , TO_CHAR(SCH_INFO_DATE, 'YYYY-MM-DD') SCH_INFO_DATE
	        , TO_CHAR(SCH_INFO_STARTDATE, 'YYYY-MM-DD') SCH_INFO_STARTDATE
	        , TO_CHAR(SCH_INFO_ENDDATE, 'YYYY-MM-DD') SCH_INFO_ENDDATE
	        , SCH_INFO_NUM
	        , SCH_INFO_READ_CNT
	    FROM SCHOOL_INFORMATION
	    WHERE TO_CHAR(SCH_INFO_STARTDATE, 'MM') = #{schInfoMonth}
	    ORDER BY SCH_INFO_STARTDATE
	</select>
	
	<!-- 상세조회 -->
	<select id="schoolBoardDetail" resultMap="school">
		SELECT SCH_INFO_CODE
			, SCH_INFO_TITLE
			, SCH_INFO_WRITER
			, TO_CHAR(SCH_INFO_DATE, 'YYYY-MM-DD') SCH_INFO_DATE
			, TO_CHAR(SCH_INFO_STARTDATE, 'YYYY-MM-DD') SCH_INFO_STARTDATE
			, TO_CHAR(SCH_INFO_ENDDATE, 'YYYY-MM-DD') SCH_INFO_ENDDATE
			, SCH_INFO_READ_CNT
			, SCH_INFO_CONTENT
			, SCH_INFO_NUM
		FROM SCHOOL_INFORMATION
		WHERE SCH_INFO_CODE = #{schInfoCode}
	</select>
	
	<!-- 조회수 증가쿼리 -->
	<update id="updateSchoolBoardReadCnt">
		UPDATE SCHOOL_INFORMATION
		SET
			SCH_INFO_READ_CNT = SCH_INFO_READ_CNT + 1
		WHERE SCH_INFO_CODE = #{schInfoCode}
	</update>
	
	<!-- 학사안내 게시글 -> 상세 -> 수정 -->	
	<update id="updateSchoolInfo">
		UPDATE SCHOOL_INFORMATION
		SET 
			SCH_INFO_CONTENT = #{schInfoContent}
			, SCH_INFO_TITLE = #{schInfoTitle}
		WHERE SCH_INFO_CODE = #{schInfoCode}	
	</update>
	<!-- 학사안내 -> 글 상세 -> 삭제 -->
	<delete id="deleteSchoolInfo">
		DELETE SCHOOL_INFORMATION
		WHERE SCH_INFO_CODE = #{schInfoCode} 
	</delete>	
	
	<!-- 학사안내 전체 데이터 수 조회 -->
	<select id="schInfoListCnt" resultType="int">
		SELECT COUNT(SCH_INFO_CODE)
		FROM SCHOOL_INFORMATION
	</select>

	
	
	
	
	
	
	
	<!-- 학사조회 -> 학생조회 -->
	<select id="checkStuList" resultMap="stuMapper.stu">
		SELECT STU_NO
		    , STU_YEAR
		    , STU_SEM
		    , DECODE(STU_STATUS, '1', '재학중', '2','휴학중', '3', '제적') STU_STATUS
		    , ST.MEM_NO
		    , MEM_NAME
		    , COLL.COLL_NO
		    , COLL_NAME
		    , DP.DEPT_NO
		    , DEPT_NAME
		FROM STU ST, COLLEAGE COLL, DEPT DP, MEMBER MEM
		WHERE ST.COLL_NO = COLL.COLL_NO
		AND ST.DEPT_NO = DP.DEPT_NO
		AND ST.MEM_NO = MEM.MEM_NO
		<!-- <if test='memberVO.searchValue != null and !memberVO.searchValue.equals("")'>
		AND UPPER(MEM_NAME) LIKE UPPER('%'||#{searchValue} ||'%')
		</if> -->
		<if test="collNo != null and collNo != ''">
		AND COLL.COLL_NO = #{collNo}
		</if>
		<if test="deptNo != null and deptNo != ''">
		AND DP.DEPT_NO = #{deptNo}
		</if>
	</select>
	
	
	<!-- 학사조회 -> 교수 조회 -->
	<select id="checkProList" resultMap="empMapper.lecture">
		SELECT EMP_NO
		    , EM.MEM_NO
		    , MEM_NAME
		    , DECODE(MEM_ROLE, 'pro', '교수', 'stf', '교직원') MEM_ROLE
		    , EM.DEPT_NO
		    , DEPT_NAME
		    , EM.COLL_NO
		    , COLL_NAME
		FROM EMP EM, MEMBER MEM, COLLEAGE COLL, DEPT DP
		WHERE EM.MEM_NO = MEM.MEM_NO
		AND EM.DEPT_NO = DP.DEPT_NO
		AND EM.COLL_NO = COLL.COLL_NO
		<if test='searchValue != null and !searchValue.equals("")'>
		AND UPPER(MEM_NAME) LIKE UPPER('%'||#{searchValue} ||'%')
		</if>
		<if test="collNo != null and collNo != ''">
		AND COLL.COLL_NO = #{collNo}
		</if>
		<if test="deptNo != null and deptNo != ''">
		AND DP.DEPT_NO = #{deptNo}
		</if>
	</select>
	
	<!-- 학사조회 -> 교직원 조회 -->
	<select id="checkStfList" resultMap="memberMapper.member">
		SELECT MEM_NO
		    , MEM_NAME
		    , DECODE(MEM_ROLE, 'pro', '교수', 'stf', '교직원') MEM_ROLE
		    , MEM_TELL
		    , MEM_EMAIL
		FROM MEMBER
		WHERE MEM_ROLE = 'stf'
		<if test='searchValue != null and !searchValue.equals("")'>
		AND UPPER(MEM_NAME) LIKE UPPER('%'||#{searchValue} ||'%')
		</if>
	</select>
	
	
	
	
	
	
	<!-- 휴학관리 전체 조회-->
	<select id="getStatusInfoList" resultMap="stuMapper.status">
		SELECT
		    STATUS_NO
		    , MB.MEM_NO
		    , MEM_NAME
		    , ST.MEM_NO
		    , STU_YEAR
		    , DE.DEPT_NO
		    , DEPT_NAME
		    , COLL.COLL_NO
		    , COLL_NAME
		    , TO_CHAR(APPLY_DATE, 'YYYY-MM-DD') AS APPLY_DATE
		    , DECODE(ING_STATUS, 'I', '승인대기', 'P', '승인완료', 'R', '승인취소') AS ING_STATUS
		    , NOW_STATUS
		    , AFTER_STATUS
		FROM MEMBER MB, STU ST, COLLEAGE COLL, DEPT DE, STATUS_INFO SI
		WHERE ST.STU_NO = SI.STU_NO
		AND ST.DEPT_NO = DE.DEPT_NO
		AND ST.COLL_NO = COLL.COLL_NO
		AND MB.MEM_NO = ST.MEM_NO
		AND NOW_STATUS = 'E'
		AND AFTER_STATUS ='A'
		AND ING_STATUS = 'I'
	</select>
	
	<!-- 휴학관리 승인 조회-->
	<select id="getStatusInfoAppList" resultMap="stuMapper.status">
		SELECT
		    STATUS_NO
		    , MB.MEM_NO
		    , MEM_NAME
		    , ST.MEM_NO
		    , STU_YEAR
		    , DE.DEPT_NO
		    , DEPT_NAME
		    , COLL.COLL_NO
		    , COLL_NAME
		    , TO_CHAR(APPLY_DATE, 'YYYY-MM-DD') AS APPLY_DATE
		    , DECODE(ING_STATUS, 'I', '승인대기', 'P', '승인완료', 'R', '승인취소') AS ING_STATUS
		    , NOW_STATUS
		    , AFTER_STATUS
		FROM MEMBER MB, STU ST, COLLEAGE COLL, DEPT DE, STATUS_INFO SI
		WHERE ST.STU_NO = SI.STU_NO
		AND ST.DEPT_NO = DE.DEPT_NO
		AND ST.COLL_NO = COLL.COLL_NO
		AND MB.MEM_NO = ST.MEM_NO
		AND NOW_STATUS = 'A'
		AND AFTER_STATUS ='A'
		AND ING_STATUS = 'P'
	</select>
	
	<!-- 휴학관리 취소 조회-->
	<select id="getStatusInfoDeniedList" resultMap="stuMapper.status">
		SELECT
		    STATUS_NO
		    , MB.MEM_NO
		    , MEM_NAME
		    , ST.MEM_NO
		    , STU_YEAR
		    , DE.DEPT_NO
		    , DEPT_NAME
		    , COLL.COLL_NO
		    , COLL_NAME
		    , TO_CHAR(APPLY_DATE, 'YYYY-MM-DD') AS APPLY_DATE
		    , DECODE(ING_STATUS, 'I', '승인대기', 'P', '승인완료', 'R', '승인취소') AS ING_STATUS
		    , NOW_STATUS
		    , AFTER_STATUS
		FROM MEMBER MB, STU ST, COLLEAGE COLL, DEPT DE, STATUS_INFO SI
		WHERE ST.STU_NO = SI.STU_NO
		AND ST.DEPT_NO = DE.DEPT_NO
		AND ST.COLL_NO = COLL.COLL_NO
		AND MB.MEM_NO = ST.MEM_NO
		AND NOW_STATUS = 'E' 
		AND AFTER_STATUS = 'E' 
		AND ING_STATUS = 'R'
	</select>
	
	
	
	<!-- 휴학관리 신청회원 조회 -->
	<select id="updateLeaveSelect" resultType="String">
		SELECT STU_NO
		FROM STATUS_INFO
		WHERE STATUS_NO = #{statusNo}
	</select>
	
	<!-- 휴학관리 신청회원 승인완료 -->
	<update id="updateLeaveApp">
		UPDATE STATUS_INFO
		SET ING_STATUS = 'P'
			, APPROVAL_DATE = SYSDATE
			, NOW_STATUS = 'A'
		WHERE STATUS_NO = #{statusNo}
	</update>
	
	<!-- 휴학관리 신청회원 승인완료 학생 정보 업데이트 -->
	<update id="updateLeaveAppStu">
		UPDATE STU
		SET STU_STATUS = '2'
		WHERE STU_NO = #{stuNo}
	</update>
	
	<!-- 휴학관리 신청회원 승인취소 -->
	<update id="updateLeaveDenied">
		UPDATE STATUS_INFO
		SET ING_STATUS = 'R'
			, APPROVAL_DATE = SYSDATE
			, AFTER_STATUS = 'E'
		WHERE STATUS_NO = #{statusNo}
	</update>
	
	<!-- 휴학관리 신청회원 승인취소 학생 정보 업데이트 -->
	<update id="updateLeaveDeniedStu">
		UPDATE STU
		SET STU_STATUS = '1'
		WHERE STU_NO = #{stuNo}
	</update>
	






	
	<!-- 복학관리 전체 조회 -->
	<select id="getStatusReturnList" resultMap="stuMapper.status">
		SELECT
		    STATUS_NO
		    , MB.MEM_NO
		    , MEM_NAME
		    , ST.MEM_NO
		    , STU_YEAR
		    , DE.DEPT_NO
		    , DEPT_NAME
		    , COLL.COLL_NO
		    , COLL_NAME
		    , TO_CHAR(APPLY_DATE, 'YYYY-MM-DD') AS APPLY_DATE
		    , DECODE(ING_STATUS, 'I', '승인대기', 'P', '승인완료', 'R', '승인취소') AS ING_STATUS
		    , NOW_STATUS
		    , AFTER_STATUS
		FROM MEMBER MB, STU ST, COLLEAGE COLL, DEPT DE, STATUS_INFO SI
		WHERE ST.STU_NO = SI.STU_NO
		AND ST.DEPT_NO = DE.DEPT_NO
		AND ST.COLL_NO = COLL.COLL_NO
		AND MB.MEM_NO = ST.MEM_NO
		AND NOW_STATUS = 'A'
		AND AFTER_STATUS = 'E'
		AND ING_STATUS = 'I'
	</select>
	
	
	<!-- 복학관리 승인 조회-->
	<select id="getStatusReturnAppList" resultMap="stuMapper.status">
		SELECT
		    STATUS_NO
		    , MB.MEM_NO
		    , MEM_NAME
		    , ST.MEM_NO
		    , STU_YEAR
		    , DE.DEPT_NO
		    , DEPT_NAME
		    , COLL.COLL_NO
		    , COLL_NAME
		    , TO_CHAR(APPLY_DATE, 'YYYY-MM-DD') AS APPLY_DATE
		    , DECODE(ING_STATUS, 'I', '승인대기', 'P', '승인완료', 'R', '승인취소') AS ING_STATUS
		    , NOW_STATUS
		    , AFTER_STATUS
		FROM MEMBER MB, STU ST, COLLEAGE COLL, DEPT DE, STATUS_INFO SI
		WHERE ST.STU_NO = SI.STU_NO
		AND ST.DEPT_NO = DE.DEPT_NO
		AND ST.COLL_NO = COLL.COLL_NO
		AND MB.MEM_NO = ST.MEM_NO
		AND NOW_STATUS = 'E'
		AND AFTER_STATUS = 'E'
		AND ING_STATUS = 'P'
	</select>
	
	<!-- 복학관리 취소 조회-->
	<select id="getStatusReturnDeniedList" resultMap="stuMapper.status">
		SELECT
		    STATUS_NO
		    , MB.MEM_NO
		    , MEM_NAME
		    , ST.MEM_NO
		    , STU_YEAR
		    , DE.DEPT_NO
		    , DEPT_NAME
		    , COLL.COLL_NO
		    , COLL_NAME
		    , TO_CHAR(APPLY_DATE, 'YYYY-MM-DD') AS APPLY_DATE
		    , DECODE(ING_STATUS, 'I', '승인대기', 'P', '승인완료', 'R', '승인취소') AS ING_STATUS
		    , NOW_STATUS
		    , AFTER_STATUS
		FROM MEMBER MB, STU ST, COLLEAGE COLL, DEPT DE, STATUS_INFO SI
		WHERE ST.STU_NO = SI.STU_NO
		AND ST.DEPT_NO = DE.DEPT_NO
		AND ST.COLL_NO = COLL.COLL_NO
		AND MB.MEM_NO = ST.MEM_NO
		AND NOW_STATUS = 'A'
		AND AFTER_STATUS = 'A'
		AND ING_STATUS = 'R'
	</select>
	
	
	<!-- 복학관리 신청회원 조회 -->
	<select id="updateReturnSelect" resultType="String">
		SELECT STU_NO
		FROM STATUS_INFO
		WHERE STATUS_NO = #{statusNo}
	</select>
	
	<!-- 복학관리 신청회원 승인완료 -->
	<update id="updateReturnApp">
		UPDATE STATUS_INFO
		SET ING_STATUS = 'P'
			, APPROVAL_DATE = SYSDATE
			, NOW_STATUS = 'E'
			, AFTER_STATUS = 'E'
		WHERE STATUS_NO = #{statusNo}
	</update>
	
	<!-- 복학관리 신청회원 승인완료 학생 정보 업데이트 -->
	<update id="updateReturnAppStu">
		UPDATE STU
		SET STU_STATUS = '1'
		WHERE STU_NO = #{stuNo}
	</update>
	
	<!-- 복학관리 신청회원 승인취소 -->
	<update id="updateReturnDenied">
		UPDATE STATUS_INFO
		SET ING_STATUS = 'R'
			, APPROVAL_DATE = SYSDATE
			, NOW_STATUS = 'A'
			, AFTER_STATUS = 'A'
		WHERE STATUS_NO = #{statusNo}
	</update>
	
	<!-- 복학관리 신청회원 승인취소 학생 정보 업데이트 -->
	<update id="updateReturnDeniedStu">
		UPDATE STU
		SET STU_STATUS = '2'
		WHERE STU_NO = #{stuNo}
	</update>
	
	
	
	
	
	
	
	
	
	
	
	
	<!-- 수업메뉴 -> 복수전공 관리 -> 전체조회 -->
	<select id="getDeptManageList" resultMap="stuMapper.deptManage">
		SELECT APPLY_NO
			, TO_CHAR(APPLY_DATE, 'YYYY-MM-DD') APPLY_DATE
			, DECODE(PROCESS_STATUS, 'I', '승인대기', 'P', '승인완료', 'R', '승인취소') AS PROCESS_STATUS
			, STU.STU_YEAR
			, STU.STU_SEM
			, STU.STU_NO
			, TO_CHAR(APPROVAL_DATE, 'YYYY-MM-DD') APPROVAL_DATE
			, MULTI_MAJOR_COLL
			, MULTI_MAJOR_DEPT
			, STU.COLL_NO
			, STU.DEPT_NO
			, COLL.COLL_NAME
			, DEPT.DEPT_NAME
			, MEM_NAME
			, STU.MEM_NO
		FROM DEPT_MANAGE, STU, COLLEAGE COLL, DEPT, MEMBER MEM
		WHERE PROCESS_STATUS = 'I'
		AND MEM.MEM_NO = STU.MEM_NO
		AND STU.STU_NO = DEPT_MANAGE.STU_NO
		AND COLL.COLL_NO = DEPT_MANAGE.MULTI_MAJOR_COLL
		AND DEPT.DEPT_NO = DEPT_MANAGE.MULTI_MAJOR_DEPT
	</select>
	<!-- 수업메뉴 -> 복수전공 관리 -> 승인완료조회 -->
	<select id="getDeptManageAppList" resultMap="stuMapper.deptManage">
		SELECT APPLY_NO
			, TO_CHAR(APPLY_DATE, 'YYYY-MM-DD') APPLY_DATE
			, DECODE(PROCESS_STATUS, 'I', '승인대기', 'P', '승인완료', 'R', '승인취소') AS PROCESS_STATUS
			, STU.STU_YEAR
			, STU.STU_SEM
			, STU.STU_NO
			, TO_CHAR(APPROVAL_DATE, 'YYYY-MM-DD') APPROVAL_DATE
			, MULTI_MAJOR_COLL
			, MULTI_MAJOR_DEPT
			, STU.COLL_NO
			, STU.DEPT_NO
			, COLL.COLL_NAME
			, DEPT.DEPT_NAME
			, MEM_NAME
			, STU.MEM_NO
		FROM DEPT_MANAGE, STU, COLLEAGE COLL, DEPT, MEMBER MEM
		WHERE PROCESS_STATUS = 'P'
		AND MEM.MEM_NO = STU.MEM_NO
		AND STU.STU_NO = DEPT_MANAGE.STU_NO
		AND COLL.COLL_NO = DEPT_MANAGE.MULTI_MAJOR_COLL
		AND DEPT.DEPT_NO = DEPT_MANAGE.MULTI_MAJOR_DEPT
	</select>
	<!-- 수업메뉴 -> 복수전공 관리 -> 승인취소조회 -->
	<select id="getDeptManageDeniedList" resultMap="stuMapper.deptManage">
		SELECT APPLY_NO
			, TO_CHAR(APPLY_DATE, 'YYYY-MM-DD') APPLY_DATE
			, DECODE(PROCESS_STATUS, 'I', '승인대기', 'P', '승인완료', 'R', '승인취소') AS PROCESS_STATUS
			, STU.STU_YEAR
			, STU.STU_SEM
			, STU.STU_NO
			, TO_CHAR(APPROVAL_DATE, 'YYYY-MM-DD') APPROVAL_DATE
			, MULTI_MAJOR_COLL
			, MULTI_MAJOR_DEPT
			, STU.COLL_NO
			, STU.DEPT_NO
			, COLL.COLL_NAME
			, DEPT.DEPT_NAME
			, MEM_NAME
			, STU.MEM_NO
		FROM DEPT_MANAGE, STU, COLLEAGE COLL, DEPT, MEMBER MEM
		WHERE PROCESS_STATUS = 'R'
		AND MEM.MEM_NO = STU.MEM_NO
		AND STU.STU_NO = DEPT_MANAGE.STU_NO
		AND COLL.COLL_NO = DEPT_MANAGE.MULTI_MAJOR_COLL
		AND DEPT.DEPT_NO = DEPT_MANAGE.MULTI_MAJOR_DEPT
	</select>
	
	<!-- 복수전공관리 신청회원 조회 -->
	<select id="updateDoubleSelect" resultType="String">
		SELECT STU_NO
		FROM DEPT_MANAGE
		WHERE APPLY_NO = #{applyNo}
	</select>
	
	<!-- 복수전공관리 신청회원 승인완료 -->
	<update id="updateDoubleApp">
		UPDATE DEPT_MANAGE
		SET PROCESS_STATUS = 'P'
			, APPROVAL_DATE = SYSDATE
		WHERE APPLY_NO = #{applyNo}
	</update>
	
	<!-- 복수전공관리 신청회원 승인취소 -->
	<update id="updateDoubleDenied">
		UPDATE DEPT_MANAGE
		SET PROCESS_STATUS = 'R'
			, APPROVAL_DATE = SYSDATE
		WHERE APPLY_NO = #{applyNo}
	</update>
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	<!--회원메뉴 회원조회 -->
	<select id="selectMemberList" resultMap="memberMapper.member">
		SELECT MEM_NO
			, MEM_NAME
			, TO_CHAR(REG_DATE, 'YYYY-MM-DD HH24:MI') AS REG_DATE
			, DECODE(MEM_ROLE, 'stu', '학생', 'pro', '교수', 'stf', '교직원') AS MEM_ROLE
			, IS_CONFIRMED
		FROM MEMBER
		WHERE IS_CONFIRMED = 'I'
		AND MEM_ROLE != 'stf'
	</select>
	
	
	<!-- 승인처리할 회원조회 -->
	<select id="selectMember" resultMap="memberMapper.member">
		SELECT MEM_NO
		    , MEM_NAME
		    , TO_CHAR(REG_DATE, 'YYYY-MM-DD HH24:MI') AS REG_DATE
		    , DECODE(MEM_ROLE, 'stu', '학생', 'pro', '교수', 'stf', '교직원') AS MEM_ROLE
		    , IS_CONFIRMED
		    , MEM_EMAIL
		    , MEM_ADDR
		    , MEM_ADDR_DETAIL
		    , MEM_TELL
		    , MEM_IMAGE
		    , MEM_GENDER
		    , MEM_BIRTHDAY
		FROM MEMBER
		WHERE IS_CONFIRMED = 'I'
		AND MEM_ROLE != 'stf'
		AND MEM_NO = #{memId}
	</select>	
	
	
	<!-- 회원메뉴 -> 회원승인처리 -->
	<update id="updatePosition">
		UPDATE MEMBER
		SET IS_CONFIRMED = 'Y'
		WHERE MEM_NO = ${memNo}
	</update>
	
	<insert id="insertStu">
		INSERT INTO STU (
			STU_NO
			, MEM_NO
		    , STU_YEAR
		    , STU_SEM
		    , STU_STATUS
		    , COLL_NO
		    , DEPT_NO
		)VALUES(
			(SELECT 'STU_'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(STU_NO, 5))), 0) + 1, 3, '0') 
         	FROM STU)
         	, #{memNo}
         	, '1학년'
		    , 1
		    , '1'
		    , #{collNo}
		    , #{deptNo}
		)
	</insert>
	<insert id="insertEmp">
		INSERT INTO EMP(
		    EMP_NO
		    , MEM_NO
		    , DEPT_NO
		    , COLL_NO
		)VALUES(
		    (SELECT 'EMP_'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(EMP_NO, 5))), 0) + 1, 3, '0') 
		    FROM EMP)
		    , #{memNo}
		    , #{deptNo}
		    , #{collNo}
		)
	</insert>	
	
	<!-- 회원메뉴 -> 신규회원 승인/취소 조회 -->
	<select id="selectMemberTotalList" resultMap="memberMapper.member">
		SELECT MEM_NO
			, MEM_NAME
			, DECODE(MEM_ROLE, 'stu', '학생', 'pro', '교수', 'stf', '교직원') AS MEM_ROLE
			, REG_DATE
			, TO_CHAR(MEM_BIRTHDAY, 'YYYY-MM-DD') AS MEM_BIRTHDAY
			, MEM_TELL
			, DECODE(IS_CONFIRMED, 'Y','승인완료', 'N', '승인취소') AS IS_CONFIRMED
			, MEM_IMAGE
		FROM MEMBER	
		ORDER BY REG_DATE DESC
	</select>
	
	<select id="selectMemberAddList" resultMap="memberMapper.member">
		SELECT MEM_NO
			, MEM_NAME
			, DECODE(MEM_ROLE, 'stu', '학생', 'pro', '교수', 'stf', '교직원') AS MEM_ROLE
			, REG_DATE
			, TO_CHAR(MEM_BIRTHDAY, 'YYYY-MM-DD') AS MEM_BIRTHDAY
			, MEM_TELL
			, DECODE(IS_CONFIRMED, 'Y','승인완료', 'N', '승인취소') AS IS_CONFIRMED
			, MEM_IMAGE
		FROM MEMBER	
		WHERE IS_CONFIRMED = 'Y'
		ORDER BY REG_DATE DESC
	</select>
	
	<select id="selectMemberDeniedList" resultMap="memberMapper.member">
		SELECT MEM_NO
			, MEM_NAME
			, DECODE(MEM_ROLE, 'stu', '학생', 'pro', '교수', 'stf', '교직원') AS MEM_ROLE
			, REG_DATE
			, TO_CHAR(MEM_BIRTHDAY, 'YYYY-MM-DD') AS MEM_BIRTHDAY
			, MEM_TELL
			, DECODE(IS_CONFIRMED, 'Y','승인완료', 'N', '승인취소') AS IS_CONFIRMED
			, MEM_IMAGE
		FROM MEMBER	
		WHERE IS_CONFIRMED = 'N'
		ORDER BY REG_DATE DESC
	</select>
	
	<!-- 회원클릭시 상세 모달창 -->
	<select id="getMemberModal" resultMap="memberMapper.member">
		SELECT MEM.MEM_NO
		    , MEM_NAME
		    , MEM_GENDER
		    , MEM_TELL
		    , MEM_ADDR
		    , MEM_ADDR_DETAIL
		    , MEM_ROLE
		    , TO_CHAR(MEM_BIRTHDAY, 'YYYY-MM-DD') AS MEM_BIRTHDAY
		    , MEM_EMAIL
		    , TO_CHAR(REG_DATE, 'YYYY-MM-DD HH24:MI') AS REG_DATE
		    , IS_CONFIRMED
		    , MEM_IMAGE
		FROM MEMBER MEM
		WHERE MEM.MEM_NO = #{memNo}
	</select>
	
<!-- 	
	<select id="getMemberModal" resultMap="memberMapper.member">
		SELECT MEM.MEM_NO
		    , MEM_NAME
		    , MEM_GENDER
		    , MEM_TELL
		    , MEM_ADDR
		    , MEM_ADDR_DETAIL
		    , MEM_ROLE
		    , MEM_BIRTHDAY
		    , MEM_EMAIL
		    , REG_DATE
		    , IS_CONFIRMED
		    , MEM_IMAGE
		    , ST.COLL_NO
		    , COLL_NAME
		    , ST.DEPT_NO
		    , DEPT_NAME
		FROM STU ST, COLLEAGE COLL, DEPT DP, MEMBER MEM
		WHERE ST.COLL_NO = COLL.COLL_NO
		AND ST.DEPT_NO = DP.DEPT_NO
		AND ST.MEM_NO = MEM.MEM_NO
		AND MEM.MEM_NO = #{memNo}
	</select> -->
	
	
	
	<!-- 회원메뉴 -> 회원승인거부처리 -->
	<update id="updateXPosition">
		UPDATE MEMBER
		SET IS_CONFIRMED = 'N'
		WHERE MEM_NO = ${memNo}
	</update>
	
	
</mapper>



























